#!/bin/sh
# Prints the current volume

case $BLOCK_BUTTON in
	1) setsid -w -f "$TERMINAL" -e pulsemixer; pkill -RTMIN+6 "${STATUSBAR:-dwmblocks}" ;;
	2) wpctl set-mute @DEFAULT_SINK@ toggle ;;
	4) wpctl set-volume @DEFAULT_SINK@ 1%+ ;;
	5) wpctl set-volume @DEFAULT_SINK@ 1%- ;;
	3) notify-send "ðŸ“¢ Volume module" "\- Shows volume ðŸ”Š, ðŸ”‡ if muted.
- Middle click to mute.
- Scroll to change." ;;
	6) setsid -f "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# Get speaker & mic volumes
spkvol="$(wpctl get-volume @DEFAULT_SINK@)"
micvol="$(wpctl get-volume @DEFAULT_SOURCE@)"

# Omit the . without calling and external program.
split() {
	IFS=$2
	set -- $1
	printf '%s' "$@"
}

# Check speaker volume
if [ "$spkvol" != "${spkvol%\[MUTED\]}" ]; then
	spkicon="ðŸ”‡"
	spkvol="off"
else
	spkvol="${spkvol#Volume: }"
	spkvol="$(printf "%.0f" "$(split "$spkvol" ".")")"

	case 1 in
		$((spkvol >= 70)) ) spkicon="ðŸ”Š" ;;
		$((spkvol >= 30)) ) spkicon="ðŸ”‰" ;;
		$((spkvol >= 1)) ) spkicon="ðŸ”ˆ" ;;
		* ) spkicon="ðŸ”‡" ;;
	esac

	spkvol="$spkvol%"
fi

# Check mic volume
micicon="ðŸŽ¤"
if [ "$micvol" != "${micvol%\[MUTED\]}" ]; then
	micvol="off"
else
	micvol="${micvol#Volume: }"
	micvol="$(printf "%.0f" "$(split "$micvol" ".")")"
	micvol="$micvol%"
fi

# Print volumes
echo "$spkicon $spkvol $micicon $micvol"
